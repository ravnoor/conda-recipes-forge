context:
  version: 0.1.6

package:
  name: nii2dcm
  version: ${{ version }}

source:
- git: https://github.com/tomaroberts/nii2dcm
  tag: v${{ version }}

build:
  script: ${{ PYTHON }} -m pip install --use-pep517 --no-build-isolation . -vv
  number: 0
  python:
    entry_points:
    - nii2dcm = nii2dcm.__main__:cli
  skip:
    - osx-arm64
  # noarch: python

requirements:
  host:
  - python
  - setuptools
  - pip
  - wheel
  - dunamai==1.18.0
  run:
  - python
  - numpy==1.23.2
  - matplotlib==3.6.2
  - nibabel==5.0.0
  - pydicom==2.3.0
  - dunamai==1.18.0
  - twine==4.0.2

tests:
- python:
    imports:
    - nii2dcm
    pip_check: true

about:
  summary: A package to convert NIfTI images to DICOM format using a reference DICOM series.
  description: "![nifti2dicom-logo](/Nifti2dicom-logo.png)\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-1-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END -->\n\n\n## Nifti2Dicom üß†üíΩ\n\n[![PyPI version](https://badge.fury.io/py/nifti2dicom.svg)](https://pypi.org/project/nifti2dicom/) [![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://www.gnu.org/licenses/MIT)\n\n\nHello there, brave soul! üåü Welcome to **Nifti2Dicom** - a project born out of sheer determination, despair, pain and probably a smidge too much caffeine. ‚òïÔ∏è Ever felt like converting NIfTI to DICOM was akin to summoning a minor demon from the pandora's box? üòà So did we. Which is why we created this snazzy tool to prevent any more unplanned infernal conferences.\n\n\n## Magic Powers (Features) üåü\n\nüåå Dimensional Doorways - Step into our magical portal! Whether you're jumping into a 3D realm or a more mysterious 4D time-warp, we've got you covered. Convert both 3D and 4D nifti images to DICOM. So, if you're clutching a 4D motion-corrected series in nifti, don't fret. We're your dimensional travel agency!\nüé® The Colorful Canvas of Segmentations - Ever dreamt of painting the universe with multilabel nifti segmentations? Well, maybe not. But hey, we can convert those vibrant dreams into 3D DICOM for you. Just hand over your brush, or in this case, your label to region mapping (tutorial brewing in our cauldron), and watch the masterpiece unfold!\n\n## Prerequisites üìã\n\n- **OS**: Universal - because we don't discriminate. üåç\n- **Python**: Version 3.10 is required because even we have our limits. üêç\n\n## Installation üîß\n\nWe highly recommend using a different realm (virtual environment) for installing nifti2dicom (or any other Python package, really).\n\n### Linux\n```bash\npython3.10 -m venv nifti2dicom\nsource nifti2dicom/bin/activate\n```\n\n### Windows\n```bash\npython -m venv nifti2dicom\nnifti2dicom\\Scripts\\activate.bat  \n```\n\nAnd now, wave a magic wand... just kidding. Do this:\n\n```bash\npip install nifti2dicom\n```\n\n## Usage üöÄ\n\nUsing the mighty **Nifti2Dicom** is (thankfully) less complicated than its origin story:\n\n\n1. Open your command line or terminal. üíª\n2. Enter the following command, replacing the placeholders with your actual paths and desired series description:\n\n### Converting 3d/4d images \n#### For 3d\n```bash\n   nifti2dicom \\\n       -d <dicom_dir>               # Directory containing reference DICOM series\n       -n <nifti_path>              # Path to the NIFTI file to be converted\n       -o <output_dir>              # Directory where the converted DICOM files will be saved\n       -desc \"<series_description>\" # Description for the DICOM series\n       -t img                       # Specifies the type of conversion (image in this case)\n```\n#### For 4d\n```bash\n   nifti2dicom \\\n       -d <dicom_dir>               # Directory containing reference DICOM series\n       -n <nifti_path>              # Path to the NIFTI file to be converted\n       -o <output_dir>              # Directory where the converted DICOM files will be saved\n       -desc \"<series_description>\" # Description for the DICOM series\n       -t img                       # Specifies the type of conversion (image in this case)\n       -v <sms | ux>                # Specifies the vendor, either \"sms\" or \"ux\"\n```\nIgnore the vendor tag, if you are working on 3d images. It is just relevant for 4D. The logic is the same for 3D.\n\n ### Converting segmentations single/multilabel segmentations\n```bash\n    nifti2dicom \\\n       -d <dicom_dir>               # Directory containing reference DICOM series\n       -n <nifti_path>              # Path to the NIFTI file to be converted\n       -o <output_dir>              # Directory where the converted DICOM files will be saved\n       -desc \"<series_description>\" # Description for the DICOM series\n       -t seg                       # Specifies the type of conversion (segmentation in this case)\n       -j <path_to_json>            # Path to the JSON file containing the organ index\n```\nFor converting nifti segmentations to DICOM, you always need to a pass a json file, which contains the mapping of the labels to the region names. The sample .json file can be found [here](/labels_region.json).\n\n### Example:\n\n#### Segmentation conversion\n  \n```bash\nnifti2dicom \\\n    -d ./refDICOM               # Reference directory with DICOM series\n    -n ./brainSegmentation.nii  # Path to the NIFTI segmentation file\n    -o ./convertedSegDICOM      # Output directory for the converted segmentation DICOM\n    -desc \"Brain Segmentation\"  # Description for the DICOM series\n    -t seg                      # Type of conversion: segmentation\n    -j ./organ_index.json       # Path to the JSON file with organ index\n```   \n\n#### Image conversion\n##### 3d conversion\n```bash\nnifti2dicom \\\n    -d ./refDICOM               # Reference directory with DICOM series\n    -n ./brainMRI.nii           # Path to the NIFTI image file\n    -o ./convertedImgDICOM      # Output directory for the converted image DICOM\n    -desc \"Fancy Brain Scan\"    # Description for the DICOM series\n    -t img                      # Type of conversion: image\n```\n                               \n##### 4d conversion\n```bash\nnifti2dicom \\\n    -d ./refDICOM               # Reference directory with DICOM series\n    -n ./brainMRI.nii           # Path to the NIFTI image file\n    -o ./convertedImgDICOM      # Output directory for the converted image DICOM\n    -desc \"Fancy Brain Scan\"    # Description for the DICOM series\n    -t img                      # Type of conversion: image\n    -v sms                      # Vendor: Siemens (you can replace this with the \\\n                                # appropriate vendor name, as of now support for united imaging \\\n                                # and siemens is provided. You can choose one of the two (sms or ux), the default value is ux)\n```\n\n Still confused? You can always type ```nifti2dicom -h``` for help!\n\n## Issues & Feedback üêõüó£\n\nIf you stumble upon any pesky bugs, or have suggestions to prevent other unforeseen exorcisms, [Open an issue](https://github.com/LalithShiyam/nifti2dicom/issues). Also, if you ever come up with a way to bring peace between NIfTI and DICOM, we're all ears (and eyes üëÄ)!\n\n## License üìú\n\nThis project is licensed under the MIT License. Check out the `LICENSE` file to see the fine print.\n\n## Acknowledgments üëè\n\n- To coffee, our eternal ally. ‚òïÔ∏è\n- The patience of everyone who ever sat near a developer (me) while they mumbled about DICOM headers.\n- The spirit animal of this project: A platypus, because just like this software, it's unique, unexpected, and gets the job done (to a reasonable extent - we are managing expectations here)!\n\n\n## üé©üîÆ A Gentle Wizardly Reminder üîÆüé©\n\nDear adventurous user, while Nifti2Dicom is sprinkled with a generous dose of magic and wizardry, it's essential to remember that no spell is perfect. Just like the age-old \"turn a frog into a prince\" trick, sometimes things don't pan out (ask any fairy tale princess). For example our segmentation conversion was tested on slicer 3D with QuantitativeReporting plugin, and we are not sure if it will work on everything.\n\nIf you ever find yourself uttering \"It doesn't work!\" take a deep breath, consider the vastness of the cosmos, and remember ‚Äî our tool isn't the answer to every cosmic conundrum. It's not a magic bullet (or wand) that'll work wonders in every scenario. But fret not, intrepid one! Reach out, and together, let's see if we can make a tad more magic happen.\n\n## Contributors ‚ú®\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/franzmaliszt\"><img src=\"https://avatars.githubusercontent.com/u/32265629?v=4?s=100\" width=\"100px;\" alt=\"franzmaliszt\"/><br /><sub><b>franzmaliszt</b></sub></a><br /><a href=\"https://github.com/ENHANCE-PET/nifti2dicom/commits?author=franzmaliszt\" title=\"Code\">üíª</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n"
  license: MIT
